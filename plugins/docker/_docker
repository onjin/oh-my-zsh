#compdef docker
#autoload

# docker zsh completion, based on homebrew completion

_docker_images() {
  installed_images=(`docker images| grep -v CREAT| cut -d\  -f 1`)
}

_all_docker_processes() {
  all_running_processes=(`docker ps -a| grep -v COMM| cut -d\  -f 1`)
}

_docker_processes() {
  running_processes=(`docker ps| grep -v COMM| cut -d\  -f 1`)
}

local -a _1st_arguments
_1st_arguments=(
    'attach:Attach to a running container'
    'build:Build a container from a Dockerfile'
    'commit:Create a new image from a container`s changes'
    'diff:Inspect changes on a container`s filesystem'
    'export:Stream the contents of a container as a tar archive'
    'history:Show the history of an image'
    'images:List images'
    'import:Create a new filesystem image from the contents of a tarball'
    'info:Display system-wide information'
    'insert:Insert a file in an image'
    'inspect:Return low-level information on a container'
    'kill:Kill a running container'
    'login:Register or Login to the docker registry server'
    'logs:Fetch the logs of a container'
    'port:Lookup the public-facing port which is NAT-ed to PRIVATE_PORT'
    'ps:List containers'
    'pull:Pull an image or a repository from the docker registry server'
    'push:Push an image or a repository to the docker registry server'
    'restart:Restart a running container'
    'rm:Remove a container'
    'rmi:Remove an image'
    'run:Run a command in a new container'
    'search:Search for an image in the docker index'
    'start:Start a stopped container'
    'stop:Stop a running container'
    'tag:Tag an image into a repository'
    'version:Show the docker version information'
    'wait:Block until a container stops, then print its exit code'
)

local expl
local -a all_pkgs installed_images running_processes

_arguments \
  '(-D)-D=false: Debug mode' \
  '(-H)-H=[tcp://127.0.0.1:4243]: tcp://host:port to bind/connect to or unix://path/to/socket to use' \
  '(-api-enable-cors)-api-enable-cors=false: Enable CORS requests in the remote api.' \
  '(-b)-b="": Attach containers to a pre-existing network bridge' \
  '(-d)-d=false: Daemon mode' \
  '(-dns)-dns="": Set custom dns servers' \
  '(-g)-g="/var/lib/docker": Path to graph storage base dir.' \
  '(-p)-p="/var/run/docker.pid": File containing process PID' \
  '(-r)-r=false: Restart previously running containers' \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "docker subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  attach)
    _arguments \
     '1: :->processes' &&  return 0

    _docker_processes
    _wanted running_processes expl 'processes' compadd -a running_processes;;
  kill)
    _arguments \
     '1: :->processes' &&  return 0

    _docker_processes
    _wanted running_processes expl 'processes' compadd -a running_processes;;
  run)
    _arguments \
    '(-a)-a=map[]: Attach to stdin, stdout or stderr.' \
    '(-b)-b=[]: Bind mount a volume from the host (e.g. -b /host\:/container)' \
    '(-c)-c=0: CPU shares (relative weight)' \
    '(-d)-d: Detached mode leave the container running in the background' \
    '(-dns)-dns=[]: Set custom dns servers' \
    '(-e)-e=[]: Set environment variables' \
    '(-entrypoint)-entrypoint="": Overwrite the default entrypoint of the image' \
    '(-h)-h="": Container host name' \
    '(-i)-i=false: Keep stdin open even if not attached' \
    '(-m)-m=0: Memory limit (in bytes)' \
    '(-p)-p=[]: Expose a container`s port to the host (use `docker port` to see the actual mapping)' \
    '(-t)-t: Allocate a pseudo-tty' \
    '(-u)-u="": Username or UID' \
    '(-v)-v=map[]: Attach a data volume' \
    '(-volumes-from)-volumes-from="": Mount volumes from the specified container' \
    '1: :->images' &&  return 0

    _docker_images
    _wanted installed_images expl 'images' compadd -a installed_images;;

  history)
    _docker_images
    _wanted installed_images expl 'images' compadd -a installed_images;;

  pull)
    _docker_images
    _wanted installed_images expl 'images' compadd -a installed_images;;

  start)
    _arguments \
     '1: :->processes' &&  return 0
    _all_docker_processes
    _wanted all_running_processes expl 'processes' compadd -a all_running_processes;;

  stop)
    _arguments \
     '1: :->processes' &&  return 0
    _docker_processes
    _wanted running_processes expl 'processes' compadd -a running_processes;;
esac
